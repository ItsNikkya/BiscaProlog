colorofcard(red,c(_,S)):-S=hearts;S=diamonds.

colorofcard(black,c(_,S)):-S=clubs;S=spades.

card(c(R,S)):-ranks(LR),suits(LS),member(R,LR),member(S,LS).

%  given

ranks([2,3,4,5,6,queen,jack,king,7,ace]).
suits([hearts,diamonds,spades,clubs]).

rankshigher(R1,R2):-
    ranks(R),append(_,[R2|LR],R),member(R1,LR).

samesuit(c(_,S),c(_,S)).

color(hearts,red).
color(diamonds,red).
color(spades,black).
color(clubs,black).

colorcard(C,c(R,S)):-color(S,C),ranks(LR),member(R,LR).

points(ace,11):-!.
points(7,10):-!.
points(king,4):-!.
points(jack,3):-!.
points(queen,2):-!.
points(X,0):-integer(X), X>=2, X=<6.

%  Begin our code
:- use_module(library(lists)).
:- use_module(library(random)).

%  Based on the card predicate above, this generates the deck.
%  deck(-Deck)
deck(D) :-
	findall(c(R,S), card(c(R,S)),D).

%  shuffles the deck
%  D is the deck (generated by deck/1), SD is the shuffled deck (to be "sorted" by random_permutation/2)
%  shuffle(+Deck, -Shuffled Deck)
shuffle(D, SD) :- 
	deck(D), random_permutation(D, SD).

%  trump/3: returns a clean deck with the trump card last, outputted for later use
%  Make Prolog Great Again!
%  trump(+Deck, -Flattened Deck, -Card)

trump(SD, X, c(R,S)):- 
	pick_first(c(R,S), SD1, SD),
	flatten(SD1,X).

%  pick_first/2: picks the first card of a deck, and returns a mess of lists inside lists with trump card last
%  pick_first(-Card, -Deck, +Deck)
pick_first(c(R,S), [SD|c(R,S)], [c(R,S)|SD]).

%  deal_cards/5: deals cards for both players
%  on an empty shuffled deck it does 
%  dealcards(+Deck, -Hand1, -Hand2, -Remaining Deck, -Counter)

deal_cards([],[],[],[],_) :- !.
deal_cards(RD,[],[],RD, 0):- !.

deal_cards(D, [S1|H1], [S2|H2], RD, C) :-
	C2 is C-1,
	dc(S1, RD1, D),
	dc(S2, RD2, RD1),
	deal_cards(RD2, H1, H2, RD, C2).

%  dc/3: returns the first card of the deck, and the modified deck
%  dc(-Card, -Deck, +Deck)
dc(_,[],[]).
dc(H, SD, [H|SD]).


% play_round/6: based on the prev round's winner chooses who goes first and takes it from there
% also finishes the game if there's nothing on the deck and hands
% play_round(other round's winner, P1's hand, P2's hand, deck, P1's points, P2's points)

play_round(Winner,[],[],[],P1,P2):-
	% human victory
	P1 > P2,
	writeln('A winner is you!'),
	write('You scored '), write(P1), writeln(' points!'),
	write('Opponent scored '), write(P2), writeln(' points!'), 
	retractall(isTrump(_)),!.

play_round(Winner,[],[],[],P1,P2):-
	% CPU victory
	P2 > P1,
	writeln('You lose! For shame.'),
	write('You scored '), write(P1), writeln(' points.'),
	write('Opponent scored '), write(P2), writeln(' points.'), 
	retractall(isTrump(_)),!.

play_round(Winner,[],[],[],P1,P2):-
	% the rare cases where a tie happens
	P2 = P1,
	writeln('Tie!'),
	write('You scored '), write(P1), writeln(' points each.'), 
	retractall(isTrump(_)),!.

play_round(Winner,Hand1, Hand2, Deck, PointsWon1, PointsWon2):-
	% human won the prev round - you go first
	Winner = 1,
	player_select_play_first(Hand1, Card1),
	play_card(Hand1, Card1, NewHand1),!,
	select_play(Hand2, Card1, Card2),
	play_card(Hand2, Card2, NewHand2),
	round_won(Winner,NewHand1,NewHand2,Card1, Card2, Deck, NH1, PointsWon1, NH2, PointsWon2, NewDeck,NP1,NP2, NWinner),
	play_round(NWinner,NH1,NH2,NewDeck,NP1, NP2),!.
play_round(Winner,Hand1, Hand2, Deck, PointsWon1, PointsWon2):-
	% CPU won the prev round - it goes first
	Winner = 2,
	select_play_first(Hand2, Card1),
	play_card(Hand2, Card1, NewHand2),!,
	player_select_play(Hand1, Card1, Card2),
	play_card(Hand1, Card2, NewHand1),
	round_won(Winner,NewHand1,NewHand2,Card1, Card2, Deck, NH1, PointsWon1, NH2, PointsWon2, NewDeck,NP1,NP2,NWinner),
	play_round(NWinner,NH1,NH2,NewDeck,NP1, NP2),!.

% count_trumps/2: lists the number of trump cards on hand, to be used in selecting cards to be played
% count_trumps(+Hand, -List w/trump cards)
count_trumps([],[]):-!.
count_trumps([c(R,S)|Tail],[c(R,S)|Out]):-
	isTrump(S),
	count_trumps(Tail,Out), !.
count_trumps([_|Tail],Out):-
	count_trumps(Tail,Out), !.

%  test_rank/3: tests the rank of 2 cards
%  the difference between this and rankshigher is that this function returns the card.
%  NOTE: seems to return the second card if they have the same rank
%  test_rank(+Card, +Card, -Return Card)
test_rank(c(R1,S1), c(R2,S2), C) :-
	rankshigher(R1,R2),!,
	C = c(R1,S1);
	C = c(R2,S2).

%  test_lower_rank/3: tests the rank of 2 cards
%  like test_rank/3 but does the opposite
%  NOTE: seems to return the second card if they have the same rank
%  test__lower_rank(+Card, +Card, -Return Card)
test_lower_rank(c(R1,S1), c(R2,S2), C):-
	not(rankshigher(R1,R2)), !,
	C = c(R1,S1);
	C = c(R2,S2).

% highest_rank_in_hand/2: checks the highest ranking card in the hand
% to be used in card selection as well
% highest_rank_in_hand(+Hand, -Card)

highest_rank_in_hand([c(R,S)], c(R,S)).
highest_rank_in_hand([c(R1,S1),c(R2,S2)],R):-
	test_rank(c(R1,S1), c(R2,S2),R).
highest_rank_in_hand([c(R1,S1),c(R2,S2),c(R3,S3)],B):-
	test_rank(c(R1,S1),c(R2,S2),C),
	test_rank(C, c(R3,S3),B).
	
% lowest_rank_in_hand/2: checks the lowest ranking card in the hand
% to be used in card selection as well
% lowest_rank_in_hand(+Hand, -Card)

lowest_rank_in_hand([c(R,S)], c(R,S)).
lowest_rank_in_hand([c(R1,S1),c(R2,S2)],R):-
	test_lower_rank(c(R1,S1), c(R2,S2),R).
lowest_rank_in_hand([c(R1,S1),c(R2,S2),c(R3,S3)],B):-
	test_lower_rank(c(R1,S1),c(R2,S2),C),
	test_lower_rank(C, c(R3,S3),B).

% select_play_first/2: If first, computer chooses a card to be played
% if there are no trumps, it plays the highest it can - otherwise plays the highest of the trumps it has
% select_play_first(+Hand, -Return Card)
select_play_first([H|[]], H):- !.
select_play_first(H1,c(R,S)):-
	count_trumps(H1,T),
	% no trumps?
	length(T,X), X = 0,
	highest_rank_in_hand(H1,c(R,S)), !.
select_play_first(H1,c(R,S)):-
	% otherwise:
	count_trumps(H1,T),
	highest_rank_in_hand(T, c(R,S)), !.

% select_play/3: If not first, selects which card to play - it will try to match suits
% select_play(+Hand,+Opponent's Played Card, -Chosen Card)
select_play([H],_, H):- !.
select_play(H1,c(RP,SP),Out):-
	% if there are higher ranking cards of the played suit:
	highest_rank_in_hand(H1, c(RA,SP)),
	rankshigher(RA,RP),!,
	Out = c(RA, SP),
	write('Your opponent played: '),
	writeln(Out).

select_play(H1,c(RP,SP),Out):-
	% if there are trumps on hand:
	count_trumps(H1,T),
	length(T,X), X > 0,
	highest_rank_in_hand(T, c(RT,ST)),!,
	Out = c(RT,ST),
	write('Your opponent played: '),
	writeln(Out).

select_play(H1,c(RP,SP),Out):-
	% if there are lower ranking cards of the played suit:
	lowest_rank_in_hand(H1, c(RB,SP)),!,
	Out = c(RB,SP),
	write('Your opponent played: '),
	writeln(Out).

select_play(H1,c(RP,SP),Out):-
	% if none of the above - select a card at random
	random_member(Out,H1),
	write('Your opponent played: '),
	writeln(Out).

	
% player_select_play_first/2 and player_select_play/3: indicate player's turn to play. player_select_play also shows what card the computer played.
% player_select_play_first(-Hand, +Card)
player_select_play_first(H1,C1):-
	writeln(''),
	writeln('You play first!'),
	write('Trump is '),
	isTrump(X),
	writeln(X),
	write('Your hand: '),
	writeln(H1),
	select_card(H1,C1).
% player_select_play(-Hand, -Card, +Card)
player_select_play(H1,C1,C2):-
	writeln(''),
	writeln('You play second!'),
	write('Trump is '),
	isTrump(X),
	writeln(X),
	write('Your hand:'),
	writeln(H1),
	write('Your opponent played: '),
	writeln(C1),
	select_card(H1,C2).

% select_card/2: actually prompts the player to pick a card from their hand
% select_card(+Hand, +Card)
select_card(X,Y):-
	writeln(''),
	writeln('Select your card. Indexes start at 1.'),
	read(N),
	nth1(N,X,Y).


% addPoints/4: score updater
% addPoints(+Rank, +Rank, -Points, -Points)
addPoints(R1,R2,Points,NPoints):-
	points(R1,P1),
	points(R2,P2),
	NPoints is (Points + P1 + P2).

% round_won/14: determines who wins the hand by comparing ranks *if same suits*
% round_won(old winner, old hand 1, old hand 2, card 1, card 2, deck, winner's hand, P1's points, loser's hand, P2's points, new deck, P1's points, P2's points, new winner)
% PointsWon arguments are repeated to avoid losing those values
round_won(Winner, H1, H2, c(R1,S1), c(R2,S1), Deck, NH1, PointsWon1, NH2, PointsWon2, NewDeck, NP1, PointsWon2, NWinner):-
	rankshigher(R1,R2), % keep winner
	get_card(Deck,H1,NH1,ND),
	get_card(ND,H2,NH2,NewDeck),
	addPoints(R1,R2,PointsWon1,NP1),!,
	next_player(no, Winner, Winner),
	write('Winner is player '),
	writeln(Winner).
round_won(Winner, H1, H2, c(R1,S1), c(R2,S1), Deck, NH1,  PointsWon1, NH2, PointsWon2, NewDeck, PointsWon1, NP2, NWinner):-
	rankshigher(R2,R1), % change winner
	get_card(Deck,H2,NH2,ND),
	get_card(ND,H1,NH1,NewDeck),
	addPoints(R1,R2,PointsWon2,NP2),
	next_player(yes, Winner,NWinner),!,
	write('Winner is player '),
	writeln(NWinner).

% round_won/14: determines who wins the hand by existance of trump cards
% round_won(old winner, old hand 1, old hand 2, card 1, card 2, deck, winner's hand, P1's points, loser's hand, P2's points, new deck, P1's points, P2's points, new winner)
% PointsWon arguments are repeated to avoid losing those values
round_won(Winner, H1, H2, c(R1,S1), c(R2,S2), Deck, NH1, PointsWon1, NH2, PointsWon2, NewDeck, PointsWon1, NP2, NWinner):-
	S1\==S2,
	isTrump(S2), % change winner
	get_card(Deck,H2,NH2,ND),
	get_card(ND,H1,NH1,NewDeck),
	addPoints(R1,R2,PointsWon2,NP2),!,
	next_player(yes, Winner, NWinner),
	write('Winner is player '),
	writeln(Winner).
round_won(Winner, H1, H2, c(R1,S1), c(R2,S2), Deck, NH1, PointsWon1, NH2, PointsWon2, NewDeck, NP1, PointsWon2, NWinner):-
	S1\==S2,
	not(isTrump(S2)), 
	get_card(Deck,H1,NH1,ND), % keep winner
	get_card(ND,H2,NH2,NewDeck),
	addPoints(R1,R2,PointsWon1,NP1),
	next_player(no,Winner,NWinner),!,
	write('Winner is player '),
	writeln(NWinner). 

% next_player/3: mini database to check if the next player should be changed (eg the winner of the prev round gets to play again) 
% next_player(status, prev player, new player)
next_player(yes,1,2).
next_player(yes,2,1).
next_player(no,1,1).
next_player(no,2,2).

% get_card/4: deals a card to ONE player
% get_card(+Deck, +Hand, -New Hand, -New Deck)
get_card([],H,H,[]).
get_card([C|D],H,[C|H],D).

% play_card/3: removes card from player's hand
% play_card(+Hand, -Card, -New Hand)
play_card(H1,C1,NH1):-
	member(C1,H1), delete(H1,C1,NH1).


%  start: game setup and communication of trump suit and player hand
%  we will assume P1 is the human player and the human always goes first

start:- 
	writeln('Welcome! You are player 1.'),
	writeln('Preparing everything...'),
	retractall(isTrump(_)),
	deck(D), shuffle(D,SD),
	trump(SD, SD1, c(R,S)),
	write('The drawn trump card is '), writeln(c(R,S)),
	assert(isTrump(S)),
	deal_cards(SD1, P1, P2, RD, 3),
	%writeln(P2),
	play_round(1, P1, P2, RD, 0, 0).